CREATE OR replace FUNCTION fn_ups_merge_update(
I_AUDIT_ID IN INTEGER
,I_TARGET_TABLE_NAME in CHARACTER VARYING
,I_SOURCE_TABLE_NAME in CHARACTER varying
,o_update_count OUT INTEGER
,i_cols_to_exclude_upd IN CHARACTER varying
,I_UPDATE_DATE_NAME IN CHARACTER VARYING default NULL
,I_UPDATE_BY_NAME IN CHARACTER VARYING default null
,i_is_in_debug IN integer DEFAULT 0
)

RETURNS integer
LANGUAGE plpgsql
AS $function$
DECLARE
V_FUN_NAME varchar(100);
V_SCHEMA varchar(50) ;
V_UPDATE_TEMPLATE varchar(10485760);
v_text varchar(100);
V_ROW_UPDATE_BY_NM varchar(200);
V_SET_COLS varchar(10485760);
V_SELECT_COLS varchar(10485760);
V_DW_INS_UPD_BY varchar(300) default  $$'fn_ups_merge_insert'$$;
V_DW_INS_UPD_DATE varchar(50) default 'now()';
v_set_template varchar(10485760);
begin
	
	V_SCHEMA = current_schema();
	v_set_template = 'TGT.##ColumnName## = SRC.##ColumnName##';
  	V_UPDATE_TEMPLATE = '
   UPDATE ##SchemaName##.##TargetTableName## TGT SET
        	##SetColumns##,
        	FROM ##SchemaName##.##SourceTableName## AS SRC
        	where ##JoinCondition##
        	##HashComparison##;
     ';
   	  with pk_columns as  (
SELECT attname as column_name
			FROM   pg_index i
			JOIN   pg_attribute a ON a.attrelid = i.indrelid
             		AND a.attnum = ANY(i.indkey)
			WHERE  i.indrelid = (V_SCHEMA||'.'||I_TARGET_TABLE_NAME)::regclass
AND    i.indisprimary
)
, ALL_COLUMNS AS
( -- get all columns in ups and tgt matched. use inner join
select ups.column_name from information_schema.columns ups
			inner join information_schema.columns tgt
			on ups.column_name = tgt.column_name
			and ups.table_schema = tgt.table_schema
			where ups.table_name = 'employee_pre'
			and tgt.table_name = 'employee'
			and tgt.column_name not in (select unnest(string_to_array(i_cols_to_exclude_upd, ',')))
)
, SET_COLUMNS AS
(
SELECT column_name
FROM ALL_columns
except
SELECT column_name
FROM pk_columns
)
, COMPARE_FINAL AS
( -- make each column to be tgt.col_name = src.col_name string
SELECT replace(v_set_template, '##ColumnName##', column_name) AS set_columns
FROM set_columns
)
select string_agg(set_columns,
			' AND ,' || chr(13) || chr(10) )   as SET_COLUMNS
			into V_SET_COLS
			from COMPARE_FINAL;
   
	 	V_UPDATE_TEMPLATE = REPLACE(V_UPDATE_TEMPLATE,'##SchemaName##',V_SCHEMA);
		V_UPDATE_TEMPLATE = REPLACE(V_UPDATE_TEMPLATE,'##SourceTableName##',I_SOURCE_TABLE_NAME);
		V_UPDATE_TEMPLATE = REPLACE(V_UPDATE_TEMPLATE,'##TargetTableName##',I_TARGET_TABLE_NAME);
		V_UPDATE_TEMPLATE = REPLACE(V_UPDATE_TEMPLATE,'##SetColumns##',V_SET_COLS);
		V_UPDATE_TEMPLATE = REPLACE(V_UPDATE_TEMPLATE, '##JoinCondition##', (
		SELECT string_agg(attname || '= src.' || attname, chr(13) || chr(10) || 'AND ' ) 
			FROM   pg_index i
			JOIN   pg_attribute a ON a.attrelid = i.indrelid
             		AND a.attnum = ANY(i.indkey)
			WHERE  i.indrelid = (V_SCHEMA||'.'||I_TARGET_TABLE_NAME)::regclass
			AND    i.indisprimary)
		);
		raise notice 'V_UPDATE_TEMPLATE %', V_UPDATE_TEMPLATE;
 	--execute V_INSERT_TEMPLATE;
 	--GET DIAGNOSTICS O_INSERT_COUNT = ROW_COUNT;
return ;

END;

$function$
;


