CREATE OR replace FUNCTION fn_ups_merge_insert(
I_AUDIT_ID IN INTEGER
,I_TARGET_TABLE_NAME CHARACTER VARYING
,I_SOURCE_TABLE_NAME CHARACTER VARYING
,O_INSERT_COUNT OUT INTEGER
,I_INSERT_DATE_NAME IN CHARACTER VARYING default NULL
,I_INSERT_BY_NAME IN CHARACTER VARYING default NULL
,I_UPDATE_DATE_NAME IN CHARACTER VARYING default NULL
,I_UPDATE_BY_NAME IN CHARACTER VARYING default NULL
)
RETURNS integer
LANGUAGE plpgsql
AS $function$
DECLARE
V_FUN_NAME varchar(100);
V_SCHEMA varchar(50) ;
V_INSERT_TEMPLATE varchar(10485760);
v_text varchar(100);
V_ROW_UPDATE_BY_NM varchar(200);
begin
	
	V_SCHEMA = current_schema();
	
  	V_INSERT_TEMPLATE = '
    INSERT INTO ##SchemaName##.##TargetTableName## (
        ##ColumnList##,
		##AuditColumns##
     )
        SELECT 
			##ColumnList##,
			current_user,
			now(),
			current_user,
			now()
       	FROM ##SchemaName##.##SourceTableName## AS s
    	WHERE NOT EXISTS (
        	SELECT * FROM ##SchemaName##.##TargetTableName##
        	WHERE ##JoinCondition##
        );
     ';
    V_INSERT_TEMPLATE = REPLACE(V_INSERT_TEMPLATE,'##SchemaName##',V_SCHEMA);
	V_INSERT_TEMPLATE = REPLACE(V_INSERT_TEMPLATE,'##SourceTableName##',I_SOURCE_TABLE_NAME);
	V_INSERT_TEMPLATE = REPLACE(V_INSERT_TEMPLATE,'##TargetTableName##',I_TARGET_TABLE_NAME);
    V_INSERT_TEMPLATE = REPLACE(V_INSERT_TEMPLATE, '##ColumnList##', (
    	select string_agg(column_name,
			',' || chr(13) || chr(10) || '    ' order by ordinal_position) from (
		select ups.column_name as column_name, tgt.ordinal_position as ordinal_position from information_schema.columns ups
			inner join information_schema.columns tgt
			on ups.column_name = tgt.column_name
			and ups.table_schema = tgt.table_schema
			where ups.table_name = I_SOURCE_TABLE_NAME
			and tgt.table_name = I_TARGET_TABLE_NAME
		) a )) ;
	 V_INSERT_TEMPLATE = REPLACE(V_INSERT_TEMPLATE, '##JoinCondition##', (
		SELECT string_agg(attname || '= s.' || attname, chr(13) || chr(10) || 'AND ' ) 
			FROM   pg_index i
			JOIN   pg_attribute a ON a.attrelid = i.indrelid
             		AND a.attnum = ANY(i.indkey)
			WHERE  i.indrelid = (V_SCHEMA||'.'||I_TARGET_TABLE_NAME)::regclass
			AND    i.indisprimary)
		);
	 V_INSERT_TEMPLATE = REPLACE(V_INSERT_TEMPLATE,'##AuditColumns##', (
	 with date_cols as (
		select i_insert_date_name as col_name where i_insert_date_name is not null
		union select i_update_date_name as col_name where i_update_date_name is not null
		union select I_UPDATE_BY_NAME as col_name where I_UPDATE_BY_NAME is not null
		union select I_INSERT_BY_NAME as col_name where I_INSERT_BY_NAME is not null
		union select 'ROW_INSERT_DATE' as col_name  where I_INSERT_DATE_NAME is null
		union select 'ROW_UPDATE_DATE' as col_name  where I_UPDATE_DATE_NAME is null
		union select 'ROW_UPDATE_BY' as col_name  where I_UPDATE_BY_NAME is null
		union select 'ROW_INSERT_BY' as col_name  where I_INSERT_BY_NAME is null
		order by col_name
		)
	select string_agg(col_name,
			',' || chr(13) || chr(10) ) from date_cols
	 ));
	 
 	
   raise notice 'Insert SQL %', V_INSERT_TEMPLATE;
 	execute V_INSERT_TEMPLATE;
 	GET DIAGNOSTICS O_INSERT_COUNT = ROW_COUNT;
return ;

END;

$function$
;
